# vim: syntax=note
===== TODO =====

#    - pin_view view
#    - pin_view template
#    - description du pin dans :
#        - pin_view
#        - pin_list
#    - login page
#    - logout page
    - profil page
    - header with:
        - user info
        - search bar
#    - board creation form
        - add a field for a cover pin/resource
#    - board update form
#    - board delete form
#        - link buttons act as submit in forms (for delete and cancel, need to open in new tab)
#            - need to add <button type="button"></button> instead of <button></button>
#        - return 404 instead of redirection when wrong user try to update or delete
#        - return 404 when user is not found (for list views)
#        - test that unknown user in url returns 404
#        - update user.n_boards after deletion
#        - delete associated pins
    - pin creation form
        - add support for:
            ../
            ../../
            ../../../ 
            to PictureHtmlParser
#        - list only user's boards in form
#        - raise 404 in case of wrong resource or board 
#        - test remove empty folder
#        - create login page and update test and pin.views
#        - pass resource pk in session variable instead of url parameter
#        - pass last visited board in session variable and put it as default in board select
        - show warning if a pin exists on same board with same resource
        - remove '------' in the board select
#        - pin file upload form
#        - pin source url form
#        - pin find image in url page
#        - previews generation functions
#            - previews generation tests
#        - pin itself creation form
#    - pin update form
#    - pin delete form
#    - test board n_pins counter
#    - test user n_boards counter
#    - test user n_pins counter
#    - test resource n_pins counter

    - JS
        - find_pin image width and height in footer
        - sort of pins by drag and drop
        - sort of boards by drag and drop
        - ajax forms
        - add a new board text input in board select of PinForm to add a new board on the go
        - replace unfound previews with color image

    - CSS
#        - inline block for all article.pin
        - hidden "Pin it" submit displayed on pin mouseover


==== Pin creation ====
    - click on "pin it" button
        - pin board and description form
    - click on "add a pin" button
        - load page with links:
            - On the web
                - load a form to enter an url
                    - load a "find" page with url in parameter and list of all
                    given page picture.
                        - first all <img> with scr attributes
                        - second all <a> with href attribute ending by .jpg to get content of lightboxes.
                    - choose picture
                    - pin board and description form
            - On your computer
                - load a form to enter a file
                    - pin board and description form


    
==== Architecture ====

Les ressources sont communes, les boards et les pins appartiennent à un utilisateur particulier,
Les boards peuvent être:
    - publics
    - privés
    - réservés aux amis

À l'ajout d'une url dans le form, wget récupère l'url au format html, scanne pour les fichiers jpegs, pngs, tiffs, et svg présents, les présente ordonnés par taille à l'utilisateur.
L'utilisateur choisi l'image.
L'utilisateur choisi le tableau, ou en crée un nouveau
L'utilisateur choisi la description calqué sur l'attribut alt ou figcaption par défaut
Le fichier est téléchargé dans un dossier temporaire <user>, renommé avec son uniqid, puis déplacé dans le dossier pins

user : connected user if any
owner : user who owns current page (the on who's username is in url)
===== Présentation =====

La présentation est copiée sur celle de pinterest (somme toute pas si mal),
peut-être en reprenant les couleurs de LR.

board_list :

une liste div aux coins arrondis avec un petit padding autour
    - l'image « titre » de 216px de large et 146px de haut (crop) (coins arrondis).
    - les 4 premières images de 45px de côté, carrée, dessous (coins arrondis).
    - un bouton « Edit » si l'user est l'owner
    - le nombre de pins du tableau


pin_list :
    
une liste de div aux coins arrondis, pas de padding
    - l'image de 236px de large
    - la description de l'image
    - pinned from
    - le domaine d'origine (en lien vers la page du site)

pin_view :

    - l'image à 736px de large
    - found on "le domaine d'origine" (en lien vers la page du site)
    - un lien « voir l'originale »


==== Les aperçus ====

Les images à l'import sont renommées avec un uuid
l'image est déposées dans un sous-dossier correspondant à sa taille
puis dans un sous dossier correspondant à ses 2 premiers bytes

sous-dossiers :
    45/
    216-146/
    236/
    736/
    full/
