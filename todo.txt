# vim: syntax=note
===== TODO =====


==== Python ====
#    - pin_view view
#    - pin_view template
#    - description du pin dans :
#        - pin_view
#        - pin_list
#    - login page
#    - logout page
#    - user facebook, flickr, pinterest, vk, twitter, google+ links on user models
        - user links in template (with small logo)
#    - user avatar auto renaming and resizing
#    - user uuid field
#    - user uuid expiration field
#    - pin policy field
#        - synchronized it with board's one (with has_changed in board save function)
#        - test it
    - user list_pins (publics or publics and privates)
#    - registration form
#    - password recovery
#    - profil form
#        - avatar in profil form
    - default user avatar « PP »
#    - profil page
    - add link to navigate between pin views
    - add an article under pin_view with preview of other pins from board.
#    - redirect to pin_list and not board_list after pin_update or create cancel
#    - redirect to pin_list and not board_list after pin_delete cancel
    
    - link back to board in pin_view
#    - remove '------' from board_create form policy select
#    - header with:
#        - user info
        - search bar
#    - board creation form
        - add a field for a cover pin/resource
#    - board update form
#    - board delete form
#        - link buttons act as submit in forms (for delete and cancel, need to open in new tab)
#            - need to add <button type="button"></button> instead of <button></button>
#        - return 404 instead of redirection when wrong user try to update or delete
#        - return 404 when user is not found (for list views)
#        - test that unknown user in url returns 404
#        - update user.n_boards after deletion
#        - delete associated pins
#    - mv grey58.png to assets/images/structure instead of data/…
#    - pin creation form
        - add some kind of rich pin description
#        - change pin creation from session variable to hidden post fields
#            - fields :
#                - url of website
#                - url of picture itself
#                    - use it to fullfill form preview image
#                    - use tmp file to fullfill it in case of upload
#                - description of picture
#                - added via (link to user it has been pin from)
#        - add suport for '/pin/create/1' and update "pinit" button in templates pin_list and pin_view 
#        - add a FK to user in resource
#            - fullfill it with user in case of upload and download
#        - add support for:
#            ../
#            ../../
#            ../../../ 
#            to PictureHtmlParser
#        - list only user's boards in form
#        - raise 404 in case of wrong resource or board 
#        - test remove empty folder
#        - create login page and update test and pin.views
#        - pass resource pk in session variable instead of url parameter
#        - pass last visited board in session variable and put it as default in board select
        - show warning if a pin exists on same board with same resource
#        - remove '------' in the board select
#        - pin file upload form
#        - pin source url form
#        - pin find image in url page
#        - previews generation functions
#            - previews generation tests
#        - pin itself creation form
#    - pin update form
#    - pin delete form
#    - test board n_pins counter
#    - test user n_boards counter
#    - test user n_pins counter
#    - test resource n_pins counter
    - synchro user n_public_pins and n_public_boards
    - split settings.py
    - mail registration to user
#    - test create_pin new algo
        - change url in download test for a local url
#    - mv pin to final destination in ResourceFactory.make_resource_from_file


==== JavaScript ====

    - extend private boards section until bottom of page in board_list
#   - find_pin image width and height in footer
    - sort of pins by drag and drop
    - sort of boards by drag and drop
    - ajax forms
    - add a new board text input in board select of PinForm to add a new board on the go
#   - replace unfound previews with color image -> done in html / css
#   - justify pins
#       - justify again when window size changes

==== CSS ====
#   - inline block for all article.pin
#   - hidden "Pin it" submit displayed on pin mouseover
#   - add max-width and max-height for img in .pin
#   - media querys to extend pin and board section.
#   - add border arround avatars
#   - css for pin find page
#   - css for forms with images
#   - change css of forms header (no margin and padding auto)
    - add some fioriture at the end of forms
    - add some fioriture at the end of pages
#    - correct bug of space on top of vertical pictures in pin_create
#   - add some margin between fields and submits
#   - reduce shadow arround user-bar avatar
#   - add "*:required fields" where it misses
    - review create_pin margin and padding to ensure img is at right place

==== Media creation ====
    - create a lock logo for private boards
    - create a new avatar with PP
    - create a PP icon for pages footers
    - create a Pin It button
    - create a sprite



==== Refactoring of pin creation ====

- add a field = user.last_used_board in db
- add a field = user.last_used_board_datetime in db
- last_visited_board  and last_visited_board_date :
    - session variable.
    - set at each visit of 'board_view'

- dowloading file from url :
    - Choose url in form :
    - return 'find_pin' view with forms with hidden fields and pin it button :
        src : url of image itself
        url : url to website itself (same as href if url links directly to image)
        description : description of pin

    - Click on js button on a site execute a post request to /pin/create with :
        src : url of image itself
        url : url to website itself (same as href if url links directly to image)
        description : description of pin

- uploading file from computer :
    - choose file in form
    - check if resource exists with same hash
        - if not :
            - save file in MEDIA_ROOT/images/tmp with unique hash name if it's a valid image
        - else :
            redirect to pin_create with session variable set 'resource' containing resource id
    - redirect to 'pin_create' with session variable 'tmp_resource' containing saved file name

- /pin/create
    - create an variables in session like :
            'pin_create_resource': 235,
            'pin_create_source': 'http://taratata.com/',
            'pin_create_added_via': 34,
            'pin_create_url': 'http://toto.com/my_page/',
            'pin_create_src': 'http://toto.com/my_file.jpg',
            'pin_create_tmp_resource': 'images/tmp/ianetanitpd.jpg',
        }
#    - if request is post and url and no src in post : (from incomplet pin_pict js button)
#        - redirect to 'find_pin' with url

#    - if request is post and src, url are in post : (from find_pin or pin_pict js button)
#        - set creation_pin['url']
#        - set creation_pin['src']
#        - return form prepopulated with:
#            - src as preview
#            - description if any as description
#            - last_visited_board if any as default board
            - or user_last_used board if any as default board

#    - if request is post and pin in form : (from pin_list or pin_view)
#        - set creation_pin['resource']
#        - set creation_pin['source'] with pin.source
#        - set creation_pin['add_via'] if pin owner isn't user
#        - return form prepopulated with:
#            - pin preview as preview
#            - pin description as description
#            - last_visited_board if any as default board
            - or user_last_used board if any as default board if creation_pin['add_via']

#    - if request is post and board, description in post : (real pin_creation form sent)

#        - if creation_pin['resource']:
#            - create new pin with resource
#            - set added_via if creation_pin['added_via']
#            - set source if creation_pin['source']

#        - if creation_pin['url'] and creation_pin['src']
#            - create new resource from src
#            - add user as resource owner
#            - create resource previews
#            - create new pin from resource

#        - if creation_pin['tmp_pin']:
#            - create new resource from tmp_pin
#            - add user as resource owner
#            - create resource preview
        
#        - reset creation_pin
#        - redirect to new pin

#    - if request is get and 'tmp_pin' in variable session : (from pin_upload)
#        - set creation_pin['tmp_pin'] with tmp_pin
#        - return form prepopulated with:
#            - tmp_pin as preview
#            - last_visited_board if any as default board
#            - or user_last_used board if any as default board
#            take more recent
    
#    - if request is get and 'resource' in variable session : (from pin_upload)
#        - set creation_pin['resource'] with resource
#        - return form prepopulated with:
#            - resource preview as preview
#            - last_visited_board if any as default board
#            - or user_last_used board if any as default board

#    - if request is get and no 'tmp_pin' or 'resource' variable session, raise 404

