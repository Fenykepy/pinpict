# vim: syntax=note
===== TODO =====

#    - pin_view view
#    - pin_view template
#    - description du pin dans :
#        - pin_view
#        - pin_list
    - login page
    - logout page
    - board creation form
    - board update form
    - board delete form
    - pin creation form
    - pin update form
    - pin delete form

    - CSS
    
==== Architecture ====

boards :

    - date-created  (board creation date)
    - date-updated  (last board update date)
    - title         (title of the board -- for display)
    - slug          (slug of the board (from title, unique)
        --> url == '/user-slug/board-slug/')
    - description   (description of board)
    - category ?    (with content-type)
    - tag ?         (with content-type)
    - n_pins        (number of pins of the board)
    - pins          (M2M to pins through description)
    - user          FK -> user
    - policy        (choices : public, private and later friends only)

pin_board
    - id
    - FK boards
    - FK pin
    - Description

pin :
    - date-created
    - date-updated
    - uniqid        https://djangosnippets.org/snippets/1262/
                    http://sametmax.com/utiliser-des-uuid-comme-primary-key-avec-lorm-de-django/
                    http://sametmax.com/quest-ce-quun-uuid-et-a-quoi-ca-sert/
    - url-origin    (uniq-together avec url-src)
    - url-scr
    - n_boards      (number of boards, when 0, delete pin)
    - file
    - width         (width of image)
    - height        (height of image)
    - weight        (weight of image)
    

user :
    - slug
    - avatar
    - signature
    - website
    - default_board_policy -> private or public


apps :
    - user
    - boards

Les pin sont communs, les boards appartiennent à un utilisateur particulier,
les descriptions des pins appartiennent à l'utilisateur qui a créé le pin.
Les boards peuvent être:
    - publics
    - privés
    - réservés aux amis

À l'ajout d'une url dans le form, wget récupère l'url au format html, scanne pour les fichiers jpegs, pngs, tiffs, et svg présents, les présente ordonnés par taille à l'utilisateur.
L'utilisateur choisi l'image.
L'utilisateur choisi le tableau, ou en crée un nouveau
L'utilisateur choisi la description calqué sur l'attribut alt ou figcaption par défaut
Le fichier est téléchargé dans un dossier temporaire <user>, renommé avec son uniqid, puis déplacé dans le dossier pins

user : connected user if any
owner : user who owns current page (the on who's username is in url)
===== Présentation =====

La présentation est copiée sur celle de pinterest (some toute pas si mal),
peut-être en reprenant les couleurs de LR.

board_list :

une liste div aux coins arrondis avec un petit padding autour
    - l'image « titre » de 216px de large et 146px de haut (crop) (coins arrondis).
    - les 4 premières images de 45px de côté, carrée, dessous (coins arrondis).
    - un bouton « Edit » si l'user est l'owner
    - le nombre de pins du tableau


pin_list :
    
une liste de div aux coins arrondis, pas de padding
    - l'image de 236px de large
    - la description de l'image
    - pinned from
    - le domaine d'origine (en lien vers la page du site)

pin_view :

    - l'image à 736px de large
    - found on "le domaine d'origine" (en lien vers la page du site)
    - un lien « voir l'originale »


==== Les aperçus ====

Les images à l'import sont renommées avec un uuid
l'image est déposées dans un sous-dossier correspondant à sa taille
puis dans un sous dossier correspondant à ses 2 premiers bytes

sous-dossiers :
    45/
    216-146/
    236/
    736/
    full/
